MamboSwap MAFRE contract address: zil1pfvzz9vqpc60j3l2n3ltc586l65gvahj85xxg7
The basic contract swap token is set to FRANC, Chocolate Stablecoin.

Code:

(*This is the first MAFRE, Mambo Automated Fixed Rate Exchange.*)
(*It is a token swap with fixed rates, variables to be changed by owner:*)
(*buy and sell rate, additional margin, accepted tokens, daily swap limit*)
(*it's aimed to be used for stablecoin2stablecoin swaps *)
(*and for fair Ilo's with fixed price for everybody*)


scilla_version 0

(* Standard Libraries *)
import IntUtils BoolUtils


library MafreSwap
let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let two_msgs =
fun (msg1 : Message) =>
fun (msg2 : Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp

let blk_leq =
  fun (blk1 : BNum) =>
  fun (blk2 : BNum) =>
    let bc1 = builtin blt blk1 blk2 in 
    let bc2 = builtin eq blk1 blk2 in 
    orb bc1 bc2

let zero = Uint128 0
let ten = Uint128 10
let hundred = Uint128 100
let thousand = Uint128 1000
let tenthousand = Uint128 10000
let tenInt = Uint32 10
let blkZero = BNum 0

let true = True
let false = False

type Error =
  | CodeNotWhitelisted
  | CodeNotOwner
  | CodeContractPaused
  | CodeNotRateChanger
  | CodeSwapLimitExceed


let make_error =
  fun (result : Error) =>
  let result_code = 
  match result with
  | CodeNotWhitelisted          => Int32 -11
  | CodeNotOwner                => Int32 -12
  | CodeContractPaused          => Int32 -13
  | CodeNotRateChanger            => Int32 -14
  | CodeSwapLimitExceed         => Int32 -15
  end
  in
{ _exception : "Error"; code : result_code }


let get_val =
  fun (some_val: Option Uint128) =>
  match some_val with
  | Some val => val
  | None => zero
  end
  
let get_blkval =
  fun (some_val: Option BNum) =>
    match some_val with
    | Some val => val
    | None => blkZero
    end
  
contract FrancSwap
(
    contract_owner: ByStr20,
    franc_token_address: ByStr20,
    franc_decimals: Uint32
)
(* Mutable fields *)
field owner_addr: ByStr20 = contract_owner
field pending_owner : Option ByStr20 = None {ByStr20}

field marginRate : Uint128 = Uint128 9950

field contractPaused : Bool = True

field franc_address : ByStr20 = franc_token_address
field buy_franc_token_rate: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field sell_franc_token_rate: Map ByStr20 Uint128 = Emp ByStr20 Uint128

field rateUpdater : Map ByStr20 ByStr20 = Emp ByStr20 ByStr20

field token_balances: Map ByStr20 Uint128 = Emp ByStr20 Uint128

field dailyBlockNumber : Uint128 = Uint128 100
field dailySwapLimit : Uint128 = Uint128 10000000000
field userSwapAmount : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field userSwapReset : Map ByStr20 BNum = Emp ByStr20 BNum

(* Procedures *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure isOwner()
  owner <- owner_addr;
  isOwner = builtin eq owner _sender;
  match isOwner with
    | True => (*Carry On*)
    | False =>
      err = CodeNotOwner;
      ThrowError err
  end
end

procedure isRateChanger(address: ByStr20)
  ratechanger <- rateUpdater[address];
  match ratechanger with
    | Some x =>
    | None =>
      err = CodeNotRateChanger;
      ThrowError err
  end
end

procedure isPaused()
  pause <- contractPaused;
  match pause with
    | True =>
      err = CodeContractPaused;
      ThrowError err
    | False =>(*Allow through*)
  end
end


transition swapTokenToFranc(token_address: ByStr20, amount: Uint128)
  isPaused;
  (*Check if token is whitelisted*)
  tokenWhitelisted <- buy_franc_token_rate[token_address];
  match tokenWhitelisted with
    | Some rate =>
      option_swapBal <- userSwapAmount[_sender];
      swapBal = get_val option_swapBal;
      curr_block <- & BLOCKNUMBER;
      isZeroCheck = builtin eq zero swapBal;
      match isZeroCheck with
        | True =>

          additionalBlock <- dailyBlockNumber;
          nextReset = builtin badd curr_block additionalBlock;
          userSwapReset[_sender] := nextReset
        | False =>

          option_blockReset <- userSwapReset[_sender];
          blockReset = get_blkval option_blockReset;
          
          isBlockHigher = blk_leq curr_block blockReset;
          match isBlockHigher with
            | True =>
            | False =>
              additionalBlock <- dailyBlockNumber;
              nextReset = builtin badd curr_block additionalBlock;
              userSwapReset[_sender] := nextReset;
              userSwapAmount[_sender] := zero
          end
      end;
      
      msg = {_tag: "TransferFrom"; _recipient : token_address; _amount: zero; from: _sender; to: _this_address; amount: amount};
      msgs = one_msg msg;
      send msgs
    | None =>
      (*Token not whitelisted*)
      err = CodeNotWhitelisted;
      ThrowError err
  end
end

transition swapFrancToToken(token_address: ByStr20, amount: Uint128)
  isPaused;
  (*Check if token is whitelisted*)
  tokenWhitelisted <- sell_franc_token_rate[token_address];
  match tokenWhitelisted with
    | Some rate =>
      franc_addr <- franc_address;
      msg = {_tag: "TransferFrom"; _recipient : franc_addr; _amount: zero; from: _sender; to: _this_address; amount: amount};
      msgs = one_msg msg;
      send msgs;
      
      decimalPlaces = builtin pow tenInt franc_decimals;
      uintConversion = builtin to_uint128 decimalPlaces;
      padValue = get_val uintConversion;
      
      hundredPad = builtin mul rate hundred;
      depaddedRate = builtin div hundredPad padValue;
      padded_token_amount = builtin mul amount depaddedRate;
      token_amount = builtin div padded_token_amount hundred;

      padAmount = builtin mul token_amount tenthousand;

      (*Initial of 9950 would equate to 99.50% back to user*)
      returnUserRate <- marginRate;
      margin_percent = builtin sub tenthousand returnUserRate;
      margin_amount = builtin mul token_amount margin_percent;
      padded_token_to_recipient = builtin sub padAmount margin_amount;
      token_to_recipient = builtin div padded_token_to_recipient tenthousand;
      
      option_swapBal <- userSwapAmount[_sender];
      swapBal = get_val option_swapBal;
      curr_block <- & BLOCKNUMBER;
      isZeroCheck = builtin eq zero swapBal;
      match isZeroCheck with
        | True =>
          additionalBlock <- dailyBlockNumber;
          nextReset = builtin badd curr_block additionalBlock;
          userSwapReset[_sender] := nextReset
        | False =>
          option_blockReset <- userSwapReset[_sender];
          blockReset = get_blkval option_blockReset;
          
          isBlockHigher = blk_leq curr_block blockReset;
          match isBlockHigher with
            | True =>
            | False =>
              additionalBlock <- dailyBlockNumber;
              nextReset = builtin badd curr_block additionalBlock;
              userSwapReset[_sender] := nextReset;
              userSwapAmount[_sender] := zero
          end
      end;
      
      option_swap_Bal <- userSwapAmount[_sender];
      swap_bal = get_val option_swap_Bal;
      afterSwap = builtin add amount swap_bal;
      limit <- dailySwapLimit;
      isGreaterThanLimit = uint128_gt afterSwap limit;
      match isGreaterThanLimit with
        | True =>
          err = CodeSwapLimitExceed;
          ThrowError err
        | False =>
          userSwapAmount[_sender] := afterSwap
      end;
      
      franc_addr <- franc_address;
      msg = {_tag : "Transfer"; _recipient: token_address; _amount: zero;
              to: _sender; amount: token_to_recipient};
      msgs = one_msg msg;
      send msgs
      
    | None =>
      (*Token not whitelisted*)
      err = CodeNotWhitelisted;
      ThrowError err
  end
end

transition setBuyFrancTokenRate(token_address: ByStr20, rate: Uint128)
  isRateChanger _sender;
  tokenWhitelisted <- buy_franc_token_rate[token_address];
  match tokenWhitelisted with
    | Some x =>
      buy_franc_token_rate[token_address] := rate
    | None =>
      (*Token not whitelisted*)
      err = CodeNotWhitelisted;
      ThrowError err
  end
end

transition setSellFrancToTokenRate(token_address: ByStr20, rate: Uint128)
  isRateChanger _sender;
  tokenWhitelisted <- sell_franc_token_rate[token_address];
  match tokenWhitelisted with
    | Some x =>
      sell_franc_token_rate[token_address] := rate
    | None =>
      (*Token not whitelisted*)
      err = CodeNotWhitelisted;
      ThrowError err
  end
end

transition addRatechanger(address: ByStr20)
  isOwner;
  rateUpdater[address] := address
end
transition removeRatechanger(address: ByStr20)
  isOwner;
  delete rateUpdater[address]
end

(*Rate setting would be written as how many of the token is to 1 Franc for e.g. 1.5 xsgd to 1 franc would be 1500000 as its 1.50*)
(*GZIL to Franc would be 0005745396157995 15 decimal places, so key in 5745396157995*)
(*Divide token by franc and you would get a 0.XXXXX / XXXXX using the token decimals key in as per normal but without the decimal place*)
transition whitelistTokenAddress(token_address: ByStr20, sell_franctoken_rate: Uint128, buy_franctoken_rate: Uint128)
  isOwner;
  buy_franc_token_rate[token_address] := buy_franctoken_rate;
  sell_franc_token_rate[token_address] := sell_franctoken_rate
end

transition removeWhitelistTokenAddress(token_address: ByStr20)
  isOwner;
  delete buy_franc_token_rate[token_address];
  delete sell_franc_token_rate[token_address]
end

(*When changing margin set the amount to be returned to user in % x 100 form*)
(*e.g. 99.50% returned to user would result in a 0.5% margin fee, therefore margin is set to 9950*)
(*no additional margin, 0% is 10000*)
transition changeMargin(margin: Uint128)
  isOwner;
  marginRate := margin
end

transition changeDailySwapLimit(amount: Uint128)
  isOwner;
  dailySwapLimit := amount
end

transition changeDailyBlockNumbers(blocks: Uint128)
  isOwner;
  dailyBlockNumber := blocks
end

transition changeFrancAddr(address: ByStr20)
  isOwner;
  franc_address := address
end

transition pauseContract()
  isOwner;
  contractPaused := true
end

transition unpauseContract()
  isOwner;
  contractPaused := false
end

(*Transfer Tokens out of this smart contract*)
transition transferToken(token_address: ByStr20, token_amount: Uint128)
  (*Only owner of contract can call and it will only send to owner of contract address as extra precaution*)
  (*Deduct token balance held also *)
  owner <- owner_addr;
  isOwner;
  msg = {_tag : "Transfer"; _recipient: token_address; _amount: Uint128 0; to: owner; amount: token_amount};
  msgs = one_msg msg;
  send msgs
end

(*Transitions is needed should a TransferFrom be Used to send funds to this contract, without this transition the contract will reject any zrc-2 tokens*)
transition RecipientAcceptTransferFrom(
  initiator : ByStr20,
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
  isPaused;
  (*Check if token is whitelisted*)
  tokenWhitelisted <- buy_franc_token_rate[_sender];
  match tokenWhitelisted with
    | Some rate =>
      
      decimalPlaces = builtin pow tenInt franc_decimals;
      uintConversion = builtin to_uint128 decimalPlaces;
      padValue = get_val uintConversion;

      paddedAmount = builtin mul amount padValue;
      
      franc_amount = builtin div paddedAmount rate;

      padAmount = builtin mul franc_amount tenthousand;
      (*Initial of 9950 would equate to 99.50% back to user*)
      returnUserRate <- marginRate;
      margin_percent = builtin sub tenthousand returnUserRate;
      margin_amount = builtin mul franc_amount margin_percent;
      padded_franc_to_recipient = builtin sub padAmount margin_amount;
      franc_to_recipient = builtin div padded_franc_to_recipient tenthousand;

      (*Add token held balances*)
      tok_bal <- token_balances[_sender];
      bal = get_val tok_bal;
      newBal = builtin add bal amount;
      token_balances[_sender] := newBal;
      
      option_swap_Bal <- userSwapAmount[sender];
      swap_bal = get_val option_swap_Bal;
      afterSwap = builtin add franc_to_recipient swap_bal;
      limit <- dailySwapLimit;
      isGreaterThanLimit = uint128_gt afterSwap limit;
      match isGreaterThanLimit with
        | True =>
          err = CodeSwapLimitExceed;
          ThrowError err
        | False =>
          userSwapAmount[sender] := afterSwap
      end;
      
      franc_addr <- franc_address;
      msg = {_tag : "Transfer"; _recipient: franc_addr; _amount: zero;
              to: sender; amount: franc_to_recipient};
      msgs = one_msg msg;
      send msgs
    | None =>
      franc_addr <- franc_address;
      isFranc = builtin eq franc_addr _sender;
      match isFranc with
        | True => (*Allow through as this is used for return of Franc*)
          (*Add token held balances*)
          tok_bal <- token_balances[_sender];
          bal = get_val tok_bal;
          newBal = builtin add bal amount;
          token_balances[_sender] := newBal
        | False =>
          (*Token not whitelisted*)
          err = CodeNotWhitelisted;
          ThrowError err
      end
  end
end

(*Transitions is needed should a Transfer be Used to send funds to this contract, without this transition the contract will reject any zrc-2 tokens*)
(*Sent into this contract via the Transfer Transition, similar to how u send your tokens from one wallet to another*)
transition RecipientAcceptTransfer(
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
  owner <- owner_addr;
  isOwner = builtin eq owner sender;
  match isOwner with
    | True => (*Carry On*)
      (*Add token held balances*)
      tok_bal <- token_balances[_sender];
      bal = get_val tok_bal;
      newBal = builtin add bal amount;
      token_balances[_sender] := newBal
    | False =>
      err = CodeNotOwner;
      ThrowError err
  end
end


(*When sending out ZRC-2 tokens via the transfer transition on the token smart contract, this is needed by the sender to determine the status of transaction whether the transaction is successful*)
(*Should it fail, the transaction is reverted*)
transition TransferSuccessCallBack(
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
      (*deduct token held balances*)
      tok_bal <- token_balances[_sender];
      bal = get_val tok_bal;
      newBal = builtin sub bal amount;
      token_balances[_sender] := newBal
end

(*When sending out ZRC-2 tokens via the transferFrom transition on the token smart contract, this is needed by the sender to determine the status of transaction whether the transaction is successful*)
(*Should it fail, the transaction is reverted*)
transition TransferFromSuccessCallBack (
  initiator : ByStr20,
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
end

(*Change Owner of Contract*)
transition RequestOwnershipTransfer(new_owner : ByStr20)
  owner <- owner_addr;
  isOwner = builtin eq _sender owner;
  match isOwner with
    | True =>
      po = Some {ByStr20} new_owner;
      pending_owner := po
    | False =>
      err = CodeNotOwner;
      ThrowError err
  end
end

transition ConfirmOwnershipTransfer()
  optional_po <- pending_owner;
  match optional_po with
  | Some optional_po =>
      caller_is_new_owner = builtin eq _sender optional_po;
      match caller_is_new_owner with
      | True =>
          (* transfer ownership *)
          owner_addr := optional_po;
          none = None {ByStr20};
          pending_owner := none
      | False => (* the caller is not the new owner, do nothing*)
        err = CodeNotOwner;
        ThrowError err
      end
  | None => (* ownership transfer is not in-progress, do nothing *)
  end
end





